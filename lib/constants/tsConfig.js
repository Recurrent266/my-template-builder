"use strict";
// Â© 2024 Amazon Web Services, Inc. or its affiliates.
// All Rights Reserved. This AWS Content is provided subject to the terms of
// the AWS Customer Agreement available at <http://aws.amazon.com/agreement>
// or other written agreement between Customer and either
// Amazon Web Services, Inc. or Amazon Web Service EMEA SARL or both.
// Copyright 2024 Amazon.com and its affiliates; all rights reserved.
// This file is Amazon Web Services Content and may not be duplicated
// or distributed without permission.
Object.defineProperty(exports, "__esModule", { value: true });
exports.TSCONFIG_OPTIONS_STRICT = exports.TSCONFIG_OPTIONS = void 0;
exports.TSCONFIG_OPTIONS = {
    alwaysStrict: undefined,
    declaration: undefined,
    esModuleInterop: undefined,
    exactOptionalPropertyTypes: undefined,
    experimentalDecorators: undefined,
    forceConsistentCasingInFileNames: undefined,
    inlineSourceMap: undefined,
    inlineSources: undefined,
    isolatedModules: undefined,
    lib: undefined,
    module: undefined,
    noEmitOnError: undefined,
    noFallthroughCasesInSwitch: undefined,
    noImplicitAny: undefined,
    noImplicitOverride: undefined,
    noImplicitReturns: undefined,
    noImplicitThis: undefined,
    noPropertyAccessFromIndexSignature: undefined,
    noUncheckedIndexedAccess: undefined,
    noUnusedLocals: undefined,
    noUnusedParameters: undefined,
    resolveJsonModule: undefined,
    skipLibCheck: undefined,
    strict: undefined,
    strictNullChecks: undefined,
    strictPropertyInitialization: undefined,
    stripInternal: undefined,
    target: undefined,
};
exports.TSCONFIG_OPTIONS_STRICT = {
    strict: true,
    exactOptionalPropertyTypes: true,
    noFallthroughCasesInSwitch: true,
    noImplicitOverride: true,
    noImplicitReturns: true,
    noPropertyAccessFromIndexSignature: true,
    noUncheckedIndexedAccess: true,
    noUnusedLocals: true,
    noUnusedParameters: true,
    isolatedModules: true,
    esModuleInterop: true,
    skipLibCheck: true,
    forceConsistentCasingInFileNames: true,
};
// export { TSCONFIG_OPTIONS, TSCONFIG_OPTIONS_STRICT };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHNDb25maWcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3RhbnRzL3RzQ29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxzREFBc0Q7QUFDdEQsNEVBQTRFO0FBQzVFLDRFQUE0RTtBQUM1RSx5REFBeUQ7QUFDekQscUVBQXFFO0FBQ3JFLHFFQUFxRTtBQUNyRSxxRUFBcUU7QUFDckUscUNBQXFDOzs7QUFJeEIsUUFBQSxnQkFBZ0IsR0FBRztJQUM5QixZQUFZLEVBQUUsU0FBUztJQUN2QixXQUFXLEVBQUUsU0FBUztJQUN0QixlQUFlLEVBQUUsU0FBUztJQUMxQiwwQkFBMEIsRUFBRSxTQUFTO0lBQ3JDLHNCQUFzQixFQUFFLFNBQVM7SUFDakMsZ0NBQWdDLEVBQUUsU0FBUztJQUMzQyxlQUFlLEVBQUUsU0FBUztJQUMxQixhQUFhLEVBQUUsU0FBUztJQUN4QixlQUFlLEVBQUUsU0FBUztJQUMxQixHQUFHLEVBQUUsU0FBUztJQUNkLE1BQU0sRUFBRSxTQUFTO0lBQ2pCLGFBQWEsRUFBRSxTQUFTO0lBQ3hCLDBCQUEwQixFQUFFLFNBQVM7SUFDckMsYUFBYSxFQUFFLFNBQVM7SUFDeEIsa0JBQWtCLEVBQUUsU0FBUztJQUM3QixpQkFBaUIsRUFBRSxTQUFTO0lBQzVCLGNBQWMsRUFBRSxTQUFTO0lBQ3pCLGtDQUFrQyxFQUFFLFNBQVM7SUFDN0Msd0JBQXdCLEVBQUUsU0FBUztJQUNuQyxjQUFjLEVBQUUsU0FBUztJQUN6QixrQkFBa0IsRUFBRSxTQUFTO0lBQzdCLGlCQUFpQixFQUFFLFNBQVM7SUFDNUIsWUFBWSxFQUFFLFNBQVM7SUFDdkIsTUFBTSxFQUFFLFNBQVM7SUFDakIsZ0JBQWdCLEVBQUUsU0FBUztJQUMzQiw0QkFBNEIsRUFBRSxTQUFTO0lBQ3ZDLGFBQWEsRUFBRSxTQUFTO0lBQ3hCLE1BQU0sRUFBRSxTQUFTO0NBQzJCLENBQUM7QUFFbEMsUUFBQSx1QkFBdUIsR0FBRztJQUNyQyxNQUFNLEVBQUUsSUFBSTtJQUNaLDBCQUEwQixFQUFFLElBQUk7SUFDaEMsMEJBQTBCLEVBQUUsSUFBSTtJQUNoQyxrQkFBa0IsRUFBRSxJQUFJO0lBQ3hCLGlCQUFpQixFQUFFLElBQUk7SUFDdkIsa0NBQWtDLEVBQUUsSUFBSTtJQUN4Qyx3QkFBd0IsRUFBRSxJQUFJO0lBQzlCLGNBQWMsRUFBRSxJQUFJO0lBQ3BCLGtCQUFrQixFQUFFLElBQUk7SUFDeEIsZUFBZSxFQUFFLElBQUk7SUFDckIsZUFBZSxFQUFFLElBQUk7SUFDckIsWUFBWSxFQUFFLElBQUk7SUFDbEIsZ0NBQWdDLEVBQUUsSUFBSTtDQUNNLENBQUM7QUFFL0Msd0RBQXdEIiwic291cmNlc0NvbnRlbnQiOlsiLy8gwqkgMjAyNCBBbWF6b24gV2ViIFNlcnZpY2VzLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLlxuLy8gQWxsIFJpZ2h0cyBSZXNlcnZlZC4gVGhpcyBBV1MgQ29udGVudCBpcyBwcm92aWRlZCBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZlxuLy8gdGhlIEFXUyBDdXN0b21lciBBZ3JlZW1lbnQgYXZhaWxhYmxlIGF0IDxodHRwOi8vYXdzLmFtYXpvbi5jb20vYWdyZWVtZW50PlxuLy8gb3Igb3RoZXIgd3JpdHRlbiBhZ3JlZW1lbnQgYmV0d2VlbiBDdXN0b21lciBhbmQgZWl0aGVyXG4vLyBBbWF6b24gV2ViIFNlcnZpY2VzLCBJbmMuIG9yIEFtYXpvbiBXZWIgU2VydmljZSBFTUVBIFNBUkwgb3IgYm90aC5cbi8vIENvcHlyaWdodCAyMDI0IEFtYXpvbi5jb20gYW5kIGl0cyBhZmZpbGlhdGVzOyBhbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gVGhpcyBmaWxlIGlzIEFtYXpvbiBXZWIgU2VydmljZXMgQ29udGVudCBhbmQgbWF5IG5vdCBiZSBkdXBsaWNhdGVkXG4vLyBvciBkaXN0cmlidXRlZCB3aXRob3V0IHBlcm1pc3Npb24uXG5cbmltcG9ydCB7IFR5cGVTY3JpcHRDb21waWxlck9wdGlvbnMgfSBmcm9tICdwcm9qZW4vbGliL2phdmFzY3JpcHQnO1xuXG5leHBvcnQgY29uc3QgVFNDT05GSUdfT1BUSU9OUyA9IHtcbiAgYWx3YXlzU3RyaWN0OiB1bmRlZmluZWQsXG4gIGRlY2xhcmF0aW9uOiB1bmRlZmluZWQsXG4gIGVzTW9kdWxlSW50ZXJvcDogdW5kZWZpbmVkLFxuICBleGFjdE9wdGlvbmFsUHJvcGVydHlUeXBlczogdW5kZWZpbmVkLFxuICBleHBlcmltZW50YWxEZWNvcmF0b3JzOiB1bmRlZmluZWQsXG4gIGZvcmNlQ29uc2lzdGVudENhc2luZ0luRmlsZU5hbWVzOiB1bmRlZmluZWQsXG4gIGlubGluZVNvdXJjZU1hcDogdW5kZWZpbmVkLFxuICBpbmxpbmVTb3VyY2VzOiB1bmRlZmluZWQsXG4gIGlzb2xhdGVkTW9kdWxlczogdW5kZWZpbmVkLFxuICBsaWI6IHVuZGVmaW5lZCxcbiAgbW9kdWxlOiB1bmRlZmluZWQsXG4gIG5vRW1pdE9uRXJyb3I6IHVuZGVmaW5lZCxcbiAgbm9GYWxsdGhyb3VnaENhc2VzSW5Td2l0Y2g6IHVuZGVmaW5lZCxcbiAgbm9JbXBsaWNpdEFueTogdW5kZWZpbmVkLFxuICBub0ltcGxpY2l0T3ZlcnJpZGU6IHVuZGVmaW5lZCxcbiAgbm9JbXBsaWNpdFJldHVybnM6IHVuZGVmaW5lZCxcbiAgbm9JbXBsaWNpdFRoaXM6IHVuZGVmaW5lZCxcbiAgbm9Qcm9wZXJ0eUFjY2Vzc0Zyb21JbmRleFNpZ25hdHVyZTogdW5kZWZpbmVkLFxuICBub1VuY2hlY2tlZEluZGV4ZWRBY2Nlc3M6IHVuZGVmaW5lZCxcbiAgbm9VbnVzZWRMb2NhbHM6IHVuZGVmaW5lZCxcbiAgbm9VbnVzZWRQYXJhbWV0ZXJzOiB1bmRlZmluZWQsXG4gIHJlc29sdmVKc29uTW9kdWxlOiB1bmRlZmluZWQsXG4gIHNraXBMaWJDaGVjazogdW5kZWZpbmVkLFxuICBzdHJpY3Q6IHVuZGVmaW5lZCxcbiAgc3RyaWN0TnVsbENoZWNrczogdW5kZWZpbmVkLFxuICBzdHJpY3RQcm9wZXJ0eUluaXRpYWxpemF0aW9uOiB1bmRlZmluZWQsXG4gIHN0cmlwSW50ZXJuYWw6IHVuZGVmaW5lZCxcbiAgdGFyZ2V0OiB1bmRlZmluZWQsXG59IHNhdGlzZmllcyBQYXJ0aWFsPFR5cGVTY3JpcHRDb21waWxlck9wdGlvbnM+O1xuXG5leHBvcnQgY29uc3QgVFNDT05GSUdfT1BUSU9OU19TVFJJQ1QgPSB7XG4gIHN0cmljdDogdHJ1ZSxcbiAgZXhhY3RPcHRpb25hbFByb3BlcnR5VHlwZXM6IHRydWUsXG4gIG5vRmFsbHRocm91Z2hDYXNlc0luU3dpdGNoOiB0cnVlLFxuICBub0ltcGxpY2l0T3ZlcnJpZGU6IHRydWUsXG4gIG5vSW1wbGljaXRSZXR1cm5zOiB0cnVlLFxuICBub1Byb3BlcnR5QWNjZXNzRnJvbUluZGV4U2lnbmF0dXJlOiB0cnVlLFxuICBub1VuY2hlY2tlZEluZGV4ZWRBY2Nlc3M6IHRydWUsXG4gIG5vVW51c2VkTG9jYWxzOiB0cnVlLFxuICBub1VudXNlZFBhcmFtZXRlcnM6IHRydWUsXG4gIGlzb2xhdGVkTW9kdWxlczogdHJ1ZSxcbiAgZXNNb2R1bGVJbnRlcm9wOiB0cnVlLFxuICBza2lwTGliQ2hlY2s6IHRydWUsXG4gIGZvcmNlQ29uc2lzdGVudENhc2luZ0luRmlsZU5hbWVzOiB0cnVlLFxufSBzYXRpc2ZpZXMgUGFydGlhbDxUeXBlU2NyaXB0Q29tcGlsZXJPcHRpb25zPjtcblxuLy8gZXhwb3J0IHsgVFNDT05GSUdfT1BUSU9OUywgVFNDT05GSUdfT1BUSU9OU19TVFJJQ1QgfTtcbiJdfQ==