"use strict";
// Â© 2024 Amazon Web Services, Inc. or its affiliates.
// All Rights Reserved. This AWS Content is provided subject to the terms of
// the AWS Customer Agreement available at <http://aws.amazon.com/agreement>
// or other written agreement between Customer and either
// Amazon Web Services, Inc. or Amazon Web Service EMEA SARL or both.
// Copyright 2024 Amazon.com and its affiliates; all rights reserved.
// This file is Amazon Web Services Content and may not be duplicated
// or distributed without permission.
Object.defineProperty(exports, "__esModule", { value: true });
exports.copyFilesAndFolders = exports.deleteFolder = exports.renameFile = exports.replaceInFile = void 0;
const fs = require("node:fs");
const path = require("node:path");
const replaceInFile = (filePath, replacements) => {
    let content = fs.readFileSync(filePath, 'utf-8');
    replacements.forEach(([regex, replacement]) => {
        content = content.replace(regex, replacement);
    });
    fs.writeFileSync(filePath, content);
};
exports.replaceInFile = replaceInFile;
const renameFile = (filePath, newFilePath) => {
    fs.renameSync(filePath, newFilePath);
};
exports.renameFile = renameFile;
const deleteFolder = (folderPath) => {
    if (fs.existsSync(folderPath)) {
        fs.rmSync(folderPath, { recursive: true, force: true });
    }
};
exports.deleteFolder = deleteFolder;
const copyFilesAndFolders = (sourcePath, destinationPath, projectName) => {
    const LOWER_PROJECT_NAME = projectName.charAt(0).toLowerCase() + projectName.slice(1);
    const UPPER_PROJECT_NAME = projectName.charAt(0).toUpperCase() + projectName.slice(1);
    // Create the destination directory if it doesn't exist
    if (!fs.existsSync(destinationPath)) {
        fs.mkdirSync(destinationPath, { recursive: true });
    }
    // Read all files and directories in the source path
    const FILES = fs.readdirSync(sourcePath);
    for (const FILE of FILES) {
        const SRC_PATH = path.join(sourcePath, FILE);
        const STATS = fs.statSync(SRC_PATH);
        if (STATS.isDirectory()) {
            let newFolderPath;
            if (FILE.includes('${app}')) {
                const NEW_FOLDER_NAME = FILE.replace('${app}', LOWER_PROJECT_NAME);
                newFolderPath = path.join(destinationPath, NEW_FOLDER_NAME);
                (0, exports.deleteFolder)(newFolderPath); // Delete the existing folder
                fs.mkdirSync(newFolderPath, { recursive: true });
                (0, exports.copyFilesAndFolders)(SRC_PATH, newFolderPath, projectName);
            }
            else {
                const FOLDER_PATH = path.join(destinationPath, FILE);
                (0, exports.deleteFolder)(FOLDER_PATH); // Delete the existing folder
                fs.mkdirSync(FOLDER_PATH, { recursive: true });
                (0, exports.copyFilesAndFolders)(SRC_PATH, FOLDER_PATH, projectName);
            }
        }
        else if (STATS.isFile()) {
            let newFilePath;
            if (FILE.includes('${app}')) {
                newFilePath = path.join(destinationPath, FILE.replace('${app}', LOWER_PROJECT_NAME));
            }
            else {
                newFilePath = path.join(destinationPath, FILE);
            }
            const TEMP_FILE_PATH = path.join(destinationPath, `temp_${FILE}`);
            fs.copyFileSync(SRC_PATH, TEMP_FILE_PATH);
            (0, exports.replaceInFile)(TEMP_FILE_PATH, [
                [/\${name}/g, LOWER_PROJECT_NAME],
                [/\${Name}/g, UPPER_PROJECT_NAME],
            ]);
            if (fs.existsSync(newFilePath)) {
                fs.unlinkSync(newFilePath); // Delete the existing file
            }
            fs.copyFileSync(TEMP_FILE_PATH, newFilePath);
            (0, exports.renameFile)(TEMP_FILE_PATH, newFilePath);
        }
    }
};
exports.copyFilesAndFolders = copyFilesAndFolders;
//# sourceMappingURL=data:application/json;base64,